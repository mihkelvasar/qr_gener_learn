#   outline

#   I core qr-code generator - can be considered done
"""
using qrcode library build a sequence of functions that take a length
 of string as an argument and converts it into a png qrcode.
Standard  function - automatically detect appropriate version depending
on string length - done
QR code version overrides - select version manually - checks if str
length can be supported, if not raises error or grays out gui option
Padding selection
Zoom selection
Custom function that takes input data upon POST, checks for type and
passes them in appropriate positions to the API.
"""

# II GUI
"""Using python gui package, create a window for accepting inputs.
Create 2nd window for help and 3rd for about"""

# III executable
"""Using executable creation library create a usable exe file that 
outputs to the directory the file is run from"""

# IV trivial stuff
#Refactor

# V build a logo resizer-adder
"""
intake function gets filename or path-to-logo-file and passes it to 
logo resizer. 
logo resizer function reads output file size in x and y pixels. It then
resizes logo to 1/3 of x and y, and saves it to temporary
logo adder takes the original outputfile and the teporary logo file and
lays the logo atop the qrcode file by position of the 1/2 x/y coordinates
of the logo file places ontop of the 1/2 xy coordinates of the code image
file.
"""